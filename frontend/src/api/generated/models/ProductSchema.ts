/* tslint:disable */
/* eslint-disable */
/**
 * backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ImageState } from './ImageState';
import {
    ImageStateFromJSON,
    ImageStateFromJSONTyped,
    ImageStateToJSON,
} from './ImageState';

/**
 * 
 * @export
 * @interface ProductSchema
 */
export interface ProductSchema {
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    uuid: string;
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    shop: string;
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    eanCode?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    quantity?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    description?: string | null;
    /**
     * 
     * @type {ImageState}
     * @memberof ProductSchema
     */
    imageState: ImageState;
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    image?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProductSchema
     */
    mainCategory: string;
}

/**
 * Check if a given object implements the ProductSchema interface.
 */
export function instanceOfProductSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "uuid" in value;
    isInstance = isInstance && "shop" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "imageState" in value;
    isInstance = isInstance && "mainCategory" in value;

    return isInstance;
}

export function ProductSchemaFromJSON(json: any): ProductSchema {
    return ProductSchemaFromJSONTyped(json, false);
}

export function ProductSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': json['uuid'],
        'shop': json['shop'],
        'eanCode': !exists(json, 'ean_code') ? undefined : json['ean_code'],
        'name': json['name'],
        'quantity': !exists(json, 'quantity') ? undefined : json['quantity'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'imageState': ImageStateFromJSON(json['image_state']),
        'image': !exists(json, 'image') ? undefined : json['image'],
        'mainCategory': json['main_category'],
    };
}

export function ProductSchemaToJSON(value?: ProductSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'shop': value.shop,
        'ean_code': value.eanCode,
        'name': value.name,
        'quantity': value.quantity,
        'description': value.description,
        'image_state': ImageStateToJSON(value.imageState),
        'image': value.image,
        'main_category': value.mainCategory,
    };
}

